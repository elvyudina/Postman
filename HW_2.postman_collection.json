{
	"info": {
		"_postman_id": "689eac2e-197a-4d72-81b1-86bb982bd044",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20212574"
	},
	"item": [
		{
			"name": "get_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Correct type\", function () {\r",
							"   pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response eql name request\"), function () {  ////!!!!!!!!не работает негативная проверка\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"};\r",
							"\r",
							" //Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age response eql age\"), function () {  \r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"};\r",
							"\r",
							" //Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"   pm.test(\"Salary response eql salary request\", function () {\r",
							"    pm.expect(+jsonData.salary).to.eql(+req_salary); \r",
							"    });\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"Response family--\", jsonData.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_name\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"name\");\r",
							"});\r",
							" \r",
							" //или проверили,что у dog есть \"ключ\"\"name\" \r",
							" pm.test(\"Dog_name_key\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.hasOwnProperty(\"name\")).to.eql(true);\r",
							"}); \r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age. \r",
							"pm.test(\"Dog_age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"age\");\r",
							"});\r",
							" //или проверили,что у dog есть \"ключ\"\"age\" \r",
							" pm.test(\"Dog_age_key\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.hasOwnProperty(\"age\")).to.eql(true);\r",
							"}); \r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog_name_Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog_age_4\", function () {\r",
							"    pm.expect(+jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}} /object_info_3?name={{name}}&age={{age}}&salary={{salary_1}}",
					"host": [
						"{{Url}} "
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response eql name request\"), function () {  \r",
							"   pm.expect(jsonData.name).to.eql(req_name);\r",
							"};\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age response eql age\"), function () {  \r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"};\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log('Salary request ='+req_salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log('Salary response ='+jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('Salary 0-й элеиент='+jsonData.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('Salary 1-й элеиент='+jsonData.salary[1]) \r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('Salary 2-й элеиент='+jsonData.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary[0] eql salary\", function () {\r",
							"    pm.expect(+jsonData.salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary[1] eql salary*2\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+req_salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary[2] eql salary*3\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+req_salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"//pm.environment.set(\"name1\");\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"pm.environment.set(\"age1\");\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary1\");\r",
							" \r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name1\",\"Lana\");\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age1\", \"22\");\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary1\", \"2100\");\r",
							" \r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i<3;i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/object_info_4?name=Ira&age=42&salary=2100",
					"host": [
						"{{Url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ira"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "2100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary1 из окружения в request\r",
							"// Вставить параметр age1 из окружения в age\r",
							"//Вставить параметр name1 из окружения в name\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							" let jsonData =pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_1\", function () {\r",
							"   pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_3\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_4\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_5\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have person\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"//или проверилb,что у body есть \"ключ\"\"person\" \r",
							"pm.test(\"Body_key\", function () {\r",
							"pm.expect(jsonData.hasOwnProperty(\"person\")).to.eql(true);\r",
							"}); \r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"//pm.test(\"Start_qa_salary eql salary \", function () {\r",
							" ////   pm.expect(JSON.stringify(jsonData.start_qa_salary)).to.include(req.salary);\r",
							"//});\r",
							"pm.test(\"Start_qa_salary eql salary \", function () {\r",
							"    pm.expect(+jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_6_months \", function () {\r",
							"    pm.expect(+jsonData.qa_salary_after_6_months).to.eql(+(req.salary*2));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_12_months \", function () {\r",
							"    pm.expect(+jsonData.qa_salary_after_12_months).to.eql(+(req.salary*2.7));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_1.5_year \", function () {\r",
							"pm.expect(JSON.stringify(jsonData['qa_salary_after_1.5_year'])).to.include(req.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_3.5_year \", function () {\r",
							"pm.expect(JSON.stringify(jsonData['qa_salary_after_3.5_years'])).to.include(req.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Chek person salary\", function () {\r",
							"    pm.expect(String(jsonData.person.u_name[1])).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Chek person age\", function () {\r",
							"    pm.expect(+jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Chek u_salary_5_years \", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"\r",
							"   \r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//for(i in jsonData.person){\r",
							" //console.log(jsonData.person[i]);\r",
							" // for(key in jsonData.person[i]){\r",
							"//console.log(`${+key +1}: ${jsonData.person[i][key]}`);\r",
							"//  }   \r",
							"//}\r",
							"for(let key in jsonData.person){\r",
							"console.log(`${key} - ${jsonData.person[key]}`);}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name1}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age1}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Url}}/user_info_2",
					"host": [
						"{{Url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							" let name_1 = jsonData.name;\r",
							" let age_1 = jsonData.age;\r",
							" let family_1 = jsonData.family;\r",
							" let salary_1 = jsonData.salary;\r",
							" let salary_2 = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							" //Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(name_1).to.eql(\"Lena\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(age_1).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(salary_1).to.eql(25000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"let name_2 = req.name;\r",
							"let age_2 = req.age;\r",
							"let salary_3 = req.salary;\r",
							"let salary_1_5 = req.salary * 4;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response eql name request\", function () {\r",
							"    pm.expect(name_1).to.eql(name_2);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age response eql age request\", function () {\r",
							"    pm.expect(age_1).to.eql(age_2);\r",
							"    });\r",
							"\r",
							" // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" pm.test(\"Salary response eql salary request\", function () {\r",
							"    pm.expect(+salary_1).to.eql(+salary_3); \r",
							"//+salary_1,+salary_3 привели к числовому типу\r",
							"    });\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary_1_5 response eql salary_1_5 request\", function () {\r",
							"    pm.expect(salary_2).to.eql(salary_1_5); \r",
							"       });\r",
							" //Вывести в консоль параметр family из response.\r",
							" console.log(jsonData.family)   \r",
							"   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "25000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Url}}/user_info_3",
					"host": [
						"{{Url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		}
	]
}